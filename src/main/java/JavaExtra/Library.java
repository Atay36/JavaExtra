/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package JavaExtra;

import java.io.File;
import java.util.ArrayList;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;

public class Library {

	static String input;
	static boolean all = false;
	static boolean m = false;
	static boolean s = false;
	static boolean p = false;
	static boolean help;

	public boolean someLibraryMethod() {
		return true;
	}

	public static void main(String[] args) {

		Options option = createOptions();
		if (parseOptions(option, args)) {
			if (help) {
				printHelp(option);
				return;
			}

		} else {
			System.exit(0);
		}
		System.out.println("a is " + all);
		System.out.println("m is " + m);
		System.out.println("s is " + s);
		System.out.println("p is " + p);

		String dataPath = input; 

		ArrayList<File> resultFileNames = new ArrayList<File>();

		File file = new File(dataPath);
		File[] fileList = file.listFiles();

		if (!all) {
			//System.out.println("-------------------------- ls-----------------------------------");
			for (File test : fileList) {
				if (!test.getName().startsWith(".")) {
					resultFileNames.add(test);
				}
			}
		} else if (all) {

			//System.out.println("-------------------------- ls(-a )-----------------------------------");

			for (File test : fileList) {
				resultFileNames.add(test);
			}
		}
		//System.out.println("-------------------------- ls -(a)s -------------------------------------");

		for (File test : resultFileNames) {
			if (s) {
				System.out.print(test.length());
				System.out.print("\t" + test.getName());
				if (p) {
					if (test.isDirectory()) {
						System.out.print("/");
					}
					if (m) {
						System.out.print(",");
					} else {
						System.out.print("\n");
					}
				} else if (m) {
					System.out.print(",");
				} else {
					System.out.print("\n");
				}
			} else {
				System.out.print(test.getName());
				if (p) {
					if (test.isDirectory()) {
						System.out.print("/");
					}
					if (m) {
						System.out.print(",");
					} else {
						System.out.print("\n");
					}
				} else if (m) {
					System.out.print(",");
				} else {
					System.out.print("\n");
				}
			}
		}

//		System.out.println("--------------------------- ls -d */----------------------------------------");
//
//		for (File test : fileList) {
//			if (test.isDirectory()) {
//				System.out.print(test.getName());
//				System.out.println("/");
//			}
//		}
//		System.out.println("-------------------------- grep -----------------------------------------");
//
//		try {
//			DirectoryStream<Path> ds = Files.newDirectoryStream(path, "P*");
//			for (Path entry : ds) {
//				System.out.println(entry.toFile().getName());
//			}
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//		System.out.println("-------------------------- ls -(a)m -----------------------------------");
//		if (m) {
//			for (File test : fileList) {
//				if (!test.equals(fileList[0])) {
//					System.out.print(",");
//				}
//				System.out.print(test.getName());
//			}
//			System.out.print("\n");
//		}

//
//	Path dirr = Paths.get(System.getProperty("user.dir")); //System.getProperty("user.dir")
//        try {
//            DirectoryStream<Path> ds = Files.newDirectoryStream(dirr, "b*");
//            for (Path entry: ds) {
//                System.out.println(entry);
//            }
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//        

	}

	private static boolean parseOptions(Options options, String[] args) {
		CommandLineParser parser = new DefaultParser();

		try {

			CommandLine cmd = parser.parse(options, args);

			input = cmd.getOptionValue("i");
			help = cmd.hasOption("h");
			all = cmd.hasOption("a");
			m = cmd.hasOption("m");
			s = cmd.hasOption("s");
			p = cmd.hasOption("p");

		} catch (Exception e) {
			printHelp(options);
			return false;
		}

		return true;
	}

	private static Options createOptions() {
		Options options = new Options();

		// add options by using OptionBuilder
		options.addOption(Option.builder("i").longOpt("input").desc("Set an input file path").hasArg()
				.argName("Input path").required().build());

		// add options by using OptionBuilder
		options.addOption(Option.builder("a").longOpt("all").desc("print all").build());

		options.addOption(Option.builder("m").longOpt("comma").desc("separate with comma").build());

		options.addOption(Option.builder("s").longOpt("size").desc("print with size").build());

		options.addOption(Option.builder("p").longOpt("isDir").desc("check directory").build());

		options.addOption(Option.builder("h").longOpt("help").desc("Help").build());

		return options;
	}

	private static void printHelp(Options options) {
		// automatically generate the help statement
		HelpFormatter formatter = new HelpFormatter();
		String header = "Ls";
		String footer = "";
		formatter.printHelp("Ls", header, options, footer, true);
	}

}
